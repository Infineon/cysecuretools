"""
Copyright 2023 Cypress Semiconductor Corporation (an Infineon company)
or an affiliate of Cypress Semiconductor Corporation. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import json

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec, rsa
from cryptography.hazmat.primitives.serialization import (
    load_der_private_key,
    load_pem_private_key,
    load_der_public_key,
    load_pem_public_key
)

from .pem_key import PemKey


def load_private_key(key_path):
    """Loads private key any of the following formats: JWK, PEM, DER"""
    try:
        with open(key_path, 'r', encoding='utf-8') as f:
            data = f.read()
    except UnicodeDecodeError:
        with open(key_path, 'rb') as f:
            der_data = f.read()
        key = load_der_private_key(der_data, password=None)
    else:
        try:
            json.loads(data)
        except json.decoder.JSONDecodeError:
            key = load_pem_private_key(data.encode(), password=None)
        else:
            pem_data = jwk_to_pem(key_path, private_key=True)
            key = load_pem_private_key(pem_data, password=None)
    return key


def load_public_key(key_path):
    """Loads public key any of the following formats: JWK, PEM, DER"""
    try:
        with open(key_path, 'r', encoding='utf-8') as f:
            data = f.read()
    except UnicodeDecodeError:
        with open(key_path, 'rb') as f:
            der_data = f.read()
        key = load_der_public_key(der_data)
    else:
        try:
            json.loads(data)
        except json.decoder.JSONDecodeError:
            key = load_pem_public_key(data.encode())
        else:
            pem_data = jwk_to_pem(key_path, private_key=False)
            key = load_pem_public_key(pem_data)
    return key


def jwk_to_pem(jwk_file, private_key=True):
    """Converts JWK file content to PEM format string"""
    pem = PemKey(jwk_file)
    pem_str = pem.to_str(private_key=private_key)
    return pem_str


def emit_c_public(key):
    """Saves public key in C-array format"""
    if isinstance(key, ec.EllipticCurvePublicKey):
        shortname = "ecdsa"
        encoded_bytes = key.public_bytes(
            encoding=serialization.Encoding.DER,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
    elif isinstance(key, rsa.RSAPublicKey):
        shortname = "rsa"
        encoded_bytes = key.public_bytes(
            encoding=serialization.Encoding.DER,
            format=serialization.PublicFormat.PKCS1
        )
    else:
        raise ValueError("Serialization of unsupported key")

    autogen_message = "/* Autogenerated by imgtool.py, do not edit. */"
    header = f"const unsigned char {shortname}_pub_key[] = {{"
    trailer = "};"
    indent = "    "
    len_format = f"const unsigned int {shortname}_pub_key_len" \
                 f" = {len(encoded_bytes)};"

    result = ""
    result += autogen_message + "\n"
    result += header
    for count, encoded_byte in enumerate(encoded_bytes):
        if count % 8 == 0:
            result += "\n" + indent
        else:
            result += " "
        result += f"{encoded_byte:#04x}" \
                  f"{'' if count + 1 == len(encoded_bytes) else ','}"
    result += "\n" + trailer + "\n"
    result += len_format + "\n"

    return result
